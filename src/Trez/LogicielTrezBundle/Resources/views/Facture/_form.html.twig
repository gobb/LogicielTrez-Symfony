{% import 'TrezLogicielTrezBundle:Utils:forms.html.twig' as forms %}

<form class="form-horizontal" action="{{ path(route, route_options is defined ? route_options : {} ) }}" {{ form_enctype(form) }} method="post">
    <div>{{ form_errors(form) }}</div>

    <fieldset>
        <legend>Identification</legend>
        <div class="control-group {{ form_errors(form.numero) ? 'error' : '' }}">
            <label class="control-label">Type & num&eacute;ro</label>
            <div class="controls">
                {{ form_widget(form.typeFacture, {'attr':  {'class': 'input-mini' }}) }}
                {{ form_widget(form.numero, {'attr': {'class': 'input-small' }}) }}
                <span class="help-inline">{{ form_errors(form.typeFacture) }}{{ form_errors(form.numero) }}</span>
            </div>
        </div>
        {{ forms.field(form.date, 'Date', {'class': 'date-selects'}, '', '<a id="date-now" href="#">Aujourd\'hui</a>') }}
        {{ forms.field(form.tiers, 'Tiers', {'class': 'chosen-tiers', 'data-placeholder': 'Choisissez le tiers concerné'}) }}
        {{ forms.field(form.objet, 'Objet', {'class': 'input-xlarge'}) }}
        {{ forms.field(form.montant, 'Montant HT', {'class': 'input-small'}) }}
    </fieldset>

    <fieldset>
        <legend>TVA</legend>
        <div>Décrivez toutes les TVAs s'appliquant sur cette facture :</div>
        <div class="error text-error">{{ form_errors(form.tvas) }}</div>
        {% set prototype = '<li class="tva form-inline" id="tva___name__">' ~
                            'Montant HT : ' ~ form_widget(form.tvas.vars.prototype.montant_ht, {'attr': {'class': 'input-small montantHt'}}) ~
                            ' - Classe : ' ~ form_widget(form.tvas.vars.prototype.classeTva, {'attr': {'class': 'input-medium classeTva'}}) ~
                            ' - Montant TVA : ' ~ form_widget(form.tvas.vars.prototype.montant_tva, {'attr': {'class': 'input-small montantTva'}}) ~
                            ' <a href="#" class="btn btn-danger btn-mini remove-tva margin-left-5" data-name="__name__">' ~
                            '<span class="icon-remove icon-white inline-mini-icon"></span></a></li>'
        %}{# Twig will automatically HTML encode double quotes when displaying the variable #}
        <ul id="tva-forms" data-prototype="{{ prototype }}" class="tva-forms">
            {% for tva in form.tvas %}
                <li class="tva form-inline" id="tva_{{ loop.index0 }}">
                    Montant HT : {{ form_widget(tva.montant_ht, {'attr': {'class': 'input-small montantHt'}}) }}
                     - Classe : {{ form_widget(tva.classeTva, {'attr': {'class': 'input-medium classeTva'}}) }}
                     - Montant TVA : {{ form_widget(tva.montant_tva, {'attr': {'class': 'input-small montantTva'}}) }}
                     <a href="#" class="btn btn-danger btn-mini remove-tva margin-left-5" data-name="{{ loop.index0 }}">
                     <span class="icon-remove icon-white inline-mini-icon"></span></a>
                </li>
            {% endfor %}
        </ul>
        <a href="#" class="btn inline-btn margin-10" id="add-tva-form">
            <span class="icon-plus-sign"></span> Ajouter une TVA
        </a>
        <span class="darkgrey"> - Montant TTC : <span id="montant-ttc"></span></span><span class="text-error margin-left-10" id="tva-error"></span>
        {% do form.tvas.setRendered %}{# otherwise a "Tvas" label will be shown at the bottom #}
    </fieldset>

    <fieldset>
        <legend>Paiement</legend>
        {{ forms.field(form.date_paiement, 'Date du paiement', {'class': 'date-selects'}, '', '<a id="date_paiement-now" href="#">Aujourd\'hui</a>') }}
        {{ forms.field(form.methodePaiement, 'Moyen de paiement') }}
        {{ forms.field(form.ref_paiement, 'Référence du paiement') }}
    </fieldset>

    <fieldset>
        <legend>Autres</legend>
        {{ forms.field(form.ligne, 'Ligne') }}
        {{ forms.field(form.commentaire, 'Commentaire', {'class': 'input-xlarge'}) }}

    </fieldset>

    {{ form_rest(form) }}

    <div class="form-actions">
        <input type="submit" class="btn btn-primary" name="add" id="submit-add" value="Valider">&nbsp;
        <input type="submit" class="btn btn-warning" name="adjust" id="submit-adjust" value="Valider et ajuster la ligne"
               title="La ligne sera ajustée afin que son total soit égal au total des factures, celle-ci inclue, en tenant compte du sens (débit ou crédit)">&nbsp;
        <a href="{{ path('facture_index', {'ligne_id': ligne_id}) }}" class="btn">Annuler</a>
    </div>
</form>

<script type="text/javascript">
    $(document).ready(function() {
        // transform select into the chosen one
        $('.chosen-tiers').chosen({no_results_text: "Pas de r&eacute;sultats"});

        // for "Now" buttons under date fields
        $('#date-now').on('click', function() {
            var _date = new Date();

            $('#trez_logicieltrezbundle_facturetype_date_day').val(_date.getDate());
            $('#trez_logicieltrezbundle_facturetype_date_month').val((_date.getMonth()+1)%12);
            $('#trez_logicieltrezbundle_facturetype_date_year').val(_date.getFullYear());
        });
        $('#date_paiement-now').on('click', function() {
            var _date = new Date();

            $('#trez_logicieltrezbundle_facturetype_date_paiement_day').val(_date.getDate());
            $('#trez_logicieltrezbundle_facturetype_date_paiement_month').val((_date.getMonth()+1)%13);
            $('#trez_logicieltrezbundle_facturetype_date_paiement_year').val(_date.getFullYear());
        });

        // datePickers
        /*$( "#date" ).datepicker({
            dateFormat: 'dd/mm/yy'
        });
        $( "#date_paiement" ).datepicker({
            dateFormat: 'dd/mm/yy'
        });*/

        /*
            TVA forms - need quite a lot of script!
         */

        // hide disabled ClasseTva
        hideDisabledClasseTva = function(e) {
            $('select.classeTva').each(function(index, domEle) {
                $(domEle).find('option').each(function(index2, domEle2) {
                    if ($(domEle2).text().search('#INACTIF#') !== -1) {
                        if ($(domEle).val()-1 != index2) {
                            $(domEle2).remove();
                        }
                    }
                });
            })
        };
        hideDisabledClasseTva();

        // check if montant of TVAs (parameter) == montant facture
        checkMontantTva = function(montant) {
            var _diff = parseFloat($('#trez_logicieltrezbundle_facturetype_montant').val().replace(',', '.'))-montant;

            if (_diff > 0) {
                $('span#tva-error').text('Attention il manque '+number_format(_diff, 2, ',', '')+' € dans la somme des montants HT !');
            } else if (_diff < 0) {
                $('span#tva-error').text('Attention il y a '+number_format(Math.abs(_diff), 2, ',', '')+' € en trop dans la somme des montants HT !');
            } else {
                $('span#tva-error').html('<span class="icon-ok"><span>');
            }
        };

        // calculate montant TTC (montant HT + TVA)
        calcMontantTtc = function() {
            var _montant_ttc = 0;
            var _tvas = $('li.tva').children();

            $('li.tva input.montantHt').each(function(index, domEle) {
                _montant_ttc += parseFloat($(domEle).val().replace(',', '.'));
            });
            checkMontantTva(_montant_ttc);
            $('li.tva input.montantTva').each(function(index, domEle) {
                _montant_ttc += parseFloat($(domEle).val().replace(',', '.'));
            });

            $('#montant-ttc').text(number_format(_montant_ttc, 2, ',', ' ')+' €');
        };
        calcMontantTtc();
        $('#trez_logicieltrezbundle_facturetype_montant').on('blur', calcMontantTtc); // so when montant is changed, check TVA

        // auto-calculate montant TVA - quite hairy because of floating-number arithmetic & DOM complexity
        calcMontantTva = function(e) {
            var _parent = $(this).parent();
            var _taux = /\[(\d+\.\d*)\]/.exec(_parent.find('select.classeTva option:selected').text())[1];
            var _montant_ht = _parent.find('input.montantHt').val().replace(',', '.');

            if (isNaN(_montant_ht) === false && isNaN(_taux) === false) {
                _montant_ht = parseInt(_montant_ht*100);
                _taux = parseInt(_taux*100);
                _parent.find('input.montantTva').val(number_format((_montant_ht*_taux/10000)/100, 2, ',', ''));
            }

            calcMontantTtc();
        };
        bindCalcTva = function() {
            $('li.tva select.classeTva').on('change', calcMontantTva);
            $('li.tva input.montantHt').on('blur', calcMontantTva);

            $('input.montantTva').attr('readonly', 'readonly');
        };
        bindCalcTva();

        // to add and remove TVAs (inline) forms
        removeTva = function(e) {
            e.preventDefault();
            $('#tva_' + e.currentTarget.dataset.name).remove();
        };
        $('#add-tva-form').on('click', function(e) {
            e.preventDefault();

             var _newTva = $($('#tva-forms').attr('data-prototype').replace(/__name__/g, $('#tva-forms').children().length));
            _newTva.appendTo('#tva-forms').find('.remove-tva').on('click', removeTva);

            hideDisabledClasseTva();
            bindCalcTva();
        });
        $('.remove-tva').on('click', removeTva);

        // check if there's a Tiers selected when the forme is submitted
        $('#submit-add, #submit-adjust').on('click', function(e) {
            if ($('#trez_logicieltrezbundle_facturetype_tiers').val() === '') {
                window.alert('Veuillez choisir un tiers pour cette facture !');
            }
        });
    });
</script>